[module]
name = "schain"
type = "feature"
info = "CNAME alias chain with 3 records"
desc = "Respond with 3 random CNAME records (schain####.yourdomain.com)."
author = "ivan.jedek@oryxlabs.com"
category = "General features"

code = '''
if req.first_subdomain.startswith("schain"):
   # Send 3 random schain CNAMEs
   dom = random_chain(req.full_domain)
   dom2 = random_chain(req.full_domain)
   dom3 = random_chain(req.full_domain)
   ### DNS header ########
   buffer = prep_dns_header(b'\x84\x00', req.QURR, 3, 0, 0)
   ### QUESTION SECTION ########
   if resp.noq: buffer += convDom2Bin(req.full_domain) + req.type_bin + req.class_bin
   ### ANSWER SECTION ########
   # CNAME
   buffer += convDom2Bin(req.full_domain) + getTypeBin("CNAME") + getClassBin("IN")
   buffer += struct.pack(">L", resp.TTL)                ## TTL
   buffer += struct.pack(">H", len(dom)+2)              ## Data length
   buffer += convDom2Bin(dom)                           ## CNAME value
   # 2nd CNAME
   buffer += convDom2Bin(req.full_domain) + getTypeBin("CNAME") + getClassBin("IN")
   buffer += struct.pack(">L", resp.TTL)                ## TTL
   buffer += struct.pack(">H", len(dom2)+2)             ## Data length
   buffer += convDom2Bin(dom2)                          ## CNAME value
   # 3rd CNAME
   buffer += convDom2Bin(req.full_domain) + getTypeBin("CNAME") + getClassBin("IN")
   buffer += struct.pack(">L", resp.TTL)                ## TTL
   buffer += struct.pack(">H", len(dom3)+2)             ## Data length
   buffer += convDom2Bin(dom3)                          ## CNAME value
   # log and send
   log("CNAME %s, %s, %s" % (dom, dom2, dom3))
   send_buf(self, buffer)
   #####################################################################
'''
