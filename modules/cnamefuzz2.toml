[module]
name = "cnamefuzz2"
type = "feature"
info = "Many random CNAME aliases, binary"
desc = "Respond with many CNAME answers where each answer contains a random binary string (NULL terminated) of specified length."
author = "ivan.jedek@oryxlabs.com"
category = "CNAME fuzzing"

code = '''
if req.first_subdomain.startswith("cnamefuzz2"):
   # Send bunch of bad (random binary) CNAME records
   cnames = 1  # number of CNAME records to send
   if req.subdomains[1].isnumeric():
      cnames = int(req.subdomains[1])
   cnamesize = 60  # CNAME size
   if req.subdomains[2].isnumeric():
      cnamesize = int(req.subdomains[2])
   ### DNS header #######
   buffer = prep_dns_header(b'\x84\x00', req.QURR, cnames, 0, 0)
   ### QUESTION SECTION ########
   if resp.noq: buffer += convDom2Bin(req.full_domain) + req.type_bin + req.class_bin
   ### ANSWER SECTION ########
   for i in range(cnames):
       data    = os.urandom(cnamesize)
       buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
       buffer += getTypeBin("CNAME") + getClassBin("IN")
       buffer += struct.pack(">L", resp.TTL)            ## TTL
       buffer += struct.pack(">H", len(data)+2)         ## Data length
       #buffer += convData2Bin(data) + b"\x00"
       buffer += struct.pack(">B", len(data)) + data + b"\x00"
   # log and send
   log("%d binary CNAME records of %d B (total: %d B)" % (cnames, cnamesize, len(buffer)))
   send_buf(self, buffer)
   #####################################################################
'''
