[module]
name = "bigbintxt"
type = "feature"
info = "TXT record with multiple binary strings"
desc = "Send a big TXT record with arbitrary number of labels of arbitrary size. The labels will contain a random binary data."
author = "ivan.jedek@oryxlabs.com"
category = "General features"

code = '''
if req.first_subdomain.startswith("bigbintxt"):
   # Send big binary TXT record
   size = 10  # number of chunks
   if req.subdomains[1].isnumeric():
      size = int(req.subdomains[1])
   chunksize = 255  # chunk size
   if req.subdomains[2].isnumeric():
      chunksize = int(req.subdomains[2])
   ### DNS header ########
   buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
   ### QUESTION SECTION ########
   if resp.noq: buffer += convDom2Bin(req.full_domain) + req.type_bin + req.class_bin
   ### ANSWER SECTION ########
   data = struct.pack(">B", chunksize) + os.urandom(chunksize)
   for i in range(size-1):
       data += struct.pack(">B", chunksize) + os.urandom(chunksize)
   # TXT
   buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
   buffer += getTypeBin("TXT") + getClassBin("IN")
   buffer += struct.pack(">L", resp.TTL)            ## TTL
   buffer += struct.pack(">H", len(data))           ## Data length
   buffer += data
   # log and send
   log("TXT with %d binary labels of %d B each (total: %d B)" % (size, chunksize, len(buffer)))
   send_buf(self, buffer)
   #####################################################################
'''
