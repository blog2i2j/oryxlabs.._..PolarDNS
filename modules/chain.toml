[module]
name = "chain"
type = "feature"
info = "alias chain"
desc = "Respond with an incremented chain record which creates an infinite alias chain. This feature supports CNAME/DNAME/HTTPS/SVCB/SRV/MX resource types"
author = "ivan.jedek@oryxlabs.com"
category = "General features"

code = '''
           elif req.first_subdomain.startswith("chain"):
              # Send incremented CNAME/DNAME/HTTPS/SVCB/SRV/MX alias record.
              ### DNS header ########
              buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
              ### QUESTION SECTION ########
              if resp.noq: buffer += convDom2Bin(req.full_domain) + req.type_bin + req.class_bin
              ### ANSWER SECTION ########
              new_domain_name = increment_chain(req.full_domain)
              bindom = convDom2Bin(new_domain_name)
              match req.type_str:
                 case "DNAME":
                    type = "DNAME"
                    buffer += convDom2Bin(req.full_domain) + getTypeBin("DNAME") + getClassBin("IN")
                    buffer += struct.pack(">L", resp.TTL)     ## TTL
                    buffer += struct.pack(">H", len(bindom))  ## Data length
                    buffer += bindom                          ## DNAME value
                 case "HTTPS":
                    type = "HTTPS"
                    data_len = 2+len(bindom)                  # SvcPriority (2 bytes) + the target name
                    buffer += convDom2Bin(req.full_domain) + getTypeBin("HTTPS") + getClassBin("IN")
                    buffer += struct.pack(">L", resp.TTL)     ## TTL
                    buffer += struct.pack(">H", data_len)     ## Data length
                    buffer += struct.pack(">H", 0)            ## SvcPriority (0 means alias mode - RFC 9460)
                    buffer += bindom                          ## TargetName
                 case "SVCB":
                    type = "SVCB"
                    data_len = 2+len(bindom)                  # SvcPriority (2 bytes) + the target name
                    buffer += convDom2Bin(req.full_domain) + getTypeBin("SVCB") + getClassBin("IN")
                    buffer += struct.pack(">L", resp.TTL)     ## TTL
                    buffer += struct.pack(">H", data_len)     ## Data length
                    buffer += struct.pack(">H", 0)            ## SvcPriority (0 means alias mode - RFC 9460)
                    buffer += bindom                          ## TargetName
                 case "SRV":
                    type = "SRV"
                    port = random.getrandbits(16)
                    data_len = 2+2+2+len(bindom)  # Priority (2 bytes) + Weight (2 bytes) + Port (2 bytes) + Target domain
                    buffer += convDom2Bin(req.full_domain) + getTypeBin("SRV") + getClassBin("IN")
                    buffer += struct.pack(">L", resp.TTL)     ## TTL
                    buffer += struct.pack(">H", data_len)     ## Data length
                    buffer += struct.pack(">H", 0)            ## Priority
                    buffer += struct.pack(">H", 0)            ## Weight
                    buffer += struct.pack(">H", port)         ## Port
                    buffer += bindom                          ## TargetName
                 case "MX":
                    type = "MX"
                    data_len = 2+len(bindom)                  # Priority (2 bytes) + Target domain
                    buffer += convDom2Bin(req.full_domain) + getTypeBin("MX") + getClassBin("IN")
                    buffer += struct.pack(">L", resp.TTL)     ## TTL
                    buffer += struct.pack(">H", data_len)     ## Data length
                    buffer += struct.pack(">H", 0)            ## Priority
                    buffer += bindom                          ## TargetName
                 case _:
                    type = "CNAME"
                    buffer += convDom2Bin(req.full_domain) + getTypeBin("CNAME") + getClassBin("IN")
                    buffer += struct.pack(">L", resp.TTL)     ## TTL
                    buffer += struct.pack(">H", len(bindom))  ## Data length
                    buffer += bindom                          ## DNAME value
              # log and send
              log("%s %s" % (type, new_domain_name))
              send_buf(self, buffer)
              #####################################################################
'''
