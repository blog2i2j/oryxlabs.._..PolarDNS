[module]
name = "srchain"
type = "feature"
info = "SRV alias chain"
desc = "Respond with an incremented SRV record. This creates an infinite alias chain."
author = "ivan.jedek@oryxlabs.com"
category = "Aliases, loops and chains"

code = '''
           elif req.first_subdomain.startswith("srchain"):
              # Send incremented SRV alias record.
              new_domain_name = increment_chain(req.full_domain)
              ### DNS header ########
              buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
              ### QUESTION SECTION ########
              if resp.noq: buffer += convDom2Bin(req.full_domain) + req.type_bin + req.class_bin
              ### ANSWER SECTION ########
              # SRV alias record
              port = random.getrandbits(16)
              bindom = convDom2Bin(new_domain_name)
              data_len = 2+2+2+len(bindom)  # Priority (2 bytes) + Weight (2 bytes) + Port (2 bytes) + Target domain
              buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
              buffer += getTypeBin("SRV") + getClassBin("IN")
              buffer += struct.pack(">L", resp.TTL)    ## TTL
              buffer += struct.pack(">H", data_len)    ## Data length
              buffer += struct.pack(">H", 0)           ## Priority
              buffer += struct.pack(">H", 0)           ## Weight
              buffer += struct.pack(">H", port)        ## Port
              buffer += bindom                         ## TargetName
              # log and send
              log("SRV %s" % (new_domain_name))
              send_buf(self, buffer)
              #####################################################################
           elif req.subdomains[0][0:1] == "_" and (req.subdomains_lc[1].startswith("srchain") or req.subdomains_lc[2].startswith("srchain") or (len(req.subdomains_lc) > 3 and req.subdomains_lc[3].startswith("srchain"))):
              # Send incremented SRV alias record for any domain name with attribute leaves (domains
              # prefixed with an underscore), up to 3 levels e.g., '_sub._service._proto.srchain...'
              new_domain_name = increment_chain(req.full_domain)
              ### DNS header ########
              buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
              ### QUESTION SECTION ########
              if resp.noq: buffer += convDom2Bin(req.full_domain) + req.type_bin + req.class_bin
              ### ANSWER SECTION ########
              # SRV alias record
              port = random.getrandbits(16)
              bindom = convDom2Bin(new_domain_name)
              data_len = 2+2+2+len(bindom)  # Priority (2 bytes) + Weight (2 bytes) + Port (2 bytes) + Target domain
              buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
              buffer += getTypeBin("SRV") + getClassBin("IN")
              buffer += struct.pack(">L", resp.TTL)    ## TTL
              buffer += struct.pack(">H", data_len)    ## Data length
              buffer += struct.pack(">H", 0)           ## Priority
              buffer += struct.pack(">H", 0)           ## Weight
              buffer += struct.pack(">H", port)        ## Port
              buffer += bindom                         ## TargetName
              # log and send
              log("SRV %s" % (new_domain_name))
              send_buf(self, buffer)
              #####################################################################
'''
