[module]
name = "loop"
type = "feature"
info = "alias loop"
desc = "Respond with a record that creates an infinite loop with any number of elements. This feature supports CNAME/DNAME/HTTPS/SVCB/SRV/MX/NS/SPF(TXT) resource types"
author = "ivan.jedek@oryxlabs.com"
category = "Aliases, loops and chains"

code = '''
if req.first_subdomain.startswith("loop"):
   # Do an alias loop in a CNAME/DNAME/HTTPS/SVCB/SRV/MX/NS/SPF(TXT) record type
   if req.subdomains[1].isnumeric() and req.subdomains[2].isnumeric():
      # we are already in a loop, e.g.:
      # loop.10.4.yourdomain.com
      max = int(req.subdomains[1])
      cur = int(req.subdomains[2])
      if cur >= max:
         # go back to the beginning of the loop
         new_domain_name = req.subdomains[0] + "." + str(max) + ".1"
      else:
         # increment the current index
         new_domain_name = req.subdomains[0] + "." + str(max) + "." + str(cur+1)
      for i in range(len(req.subdomains)-3):
         new_domain_name += "." + req.subdomains[i+3]
   elif req.subdomains[1].isnumeric():
      # we are in beginning of a loop with a requested max value, e.g.:
      # loop.10.yourdomain.com
      max = int(req.subdomains[1])
      if max < 1:
         max = 1
      new_domain_name = req.subdomains[0] + "." + str(max) + "." + "1"
      for i in range(len(req.subdomains)-2):
         new_domain_name += "." + req.subdomains[i+2]
   else:
      # just immediate loop
      new_domain_name = req.full_domain
   ### DNS header ########
   buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
   ### QUESTION SECTION ########
   if resp.noq: buffer += convDom2Bin(req.full_domain) + req.type_bin + req.class_bin
   ### ANSWER SECTION ########
   bindom = convDom2Bin(new_domain_name)
   match req.type_str:
      case "DNAME":
         type = "DNAME"
         buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
         buffer += getTypeBin("DNAME") + getClassBin("IN")
         buffer += struct.pack(">L", resp.TTL)     ## TTL
         buffer += struct.pack(">H", len(bindom))  ## Data length
         buffer += bindom                          ## DNAME value
      case "HTTPS":
         type = "HTTPS"
         data_len = 2+len(bindom)                  # SvcPriority (2 bytes) + the target name
         buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
         buffer += getTypeBin("HTTPS") + getClassBin("IN")
         buffer += struct.pack(">L", resp.TTL)     ## TTL
         buffer += struct.pack(">H", data_len)     ## Data length
         buffer += struct.pack(">H", 0)            ## SvcPriority (0 means alias mode - RFC 9460)
         buffer += bindom                          ## TargetName
      case "SVCB":
         type = "SVCB"
         data_len = 2+len(bindom)                  # SvcPriority (2 bytes) + the target name
         buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
         buffer += getTypeBin("SVCB") + getClassBin("IN")
         buffer += struct.pack(">L", resp.TTL)     ## TTL
         buffer += struct.pack(">H", data_len)     ## Data length
         buffer += struct.pack(">H", 0)            ## SvcPriority (0 means alias mode - RFC 9460)
         buffer += bindom                          ## TargetName
      case "SRV":
         type = "SRV"
         port = random.getrandbits(16)
         data_len = 2+2+2+len(bindom)  # Priority (2 bytes) + Weight (2 bytes) + Port (2 bytes) + Target domain
         buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
         buffer += getTypeBin("SRV") + getClassBin("IN")
         buffer += struct.pack(">L", resp.TTL)     ## TTL
         buffer += struct.pack(">H", data_len)     ## Data length
         buffer += struct.pack(">H", 0)            ## Priority
         buffer += struct.pack(">H", 0)            ## Weight
         buffer += struct.pack(">H", port)         ## Port
         buffer += bindom                          ## TargetName
      case "MX":
         type = "MX"
         data_len = 2+len(bindom)                  # Priority (2 bytes) + Target domain
         buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
         buffer += getTypeBin("MX") + getClassBin("IN")
         buffer += struct.pack(">L", resp.TTL)     ## TTL
         buffer += struct.pack(">H", data_len)     ## Data length
         buffer += struct.pack(">H", 0)            ## Priority
         buffer += bindom                          ## TargetName
      case "NS":
         type = "NS"
         buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
         buffer += getTypeBin("NS") + getClassBin("IN")
         buffer += struct.pack(">L", resp.TTL)     ## TTL
         buffer += struct.pack(">H", len(bindom))  ## Data length
         buffer += bindom                          ## NS value
      case "TXT":
         type = "SPF(TXT)"
         buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
         data = "v=spf1 include:" + new_domain_name + " ~all"
         buffer += getTypeBin("TXT") + getClassBin("IN")
         buffer += struct.pack(">L", resp.TTL)     ## TTL
         buffer += struct.pack(">H", len(data)+1)  ## Data length (2B)
         buffer += struct.pack(">B", len(data))    ## TXT length (1B)
         buffer += data.encode("utf-8")            ## TXT SPF value
      case _:
         type = "CNAME"
         buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
         buffer += getTypeBin("CNAME") + getClassBin("IN")
         buffer += struct.pack(">L", resp.TTL)     ## TTL
         buffer += struct.pack(">H", len(bindom))  ## Data length
         buffer += bindom                          ## DNAME value
   # log and send
   log("%s LOOP %s" % (type, new_domain_name))
   send_buf(self, buffer)
   #####################################################################
'''
