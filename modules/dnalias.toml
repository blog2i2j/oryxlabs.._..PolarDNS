[module]
name = "dnalias"
type = "feature"
info = "DNAME random N aliases"
desc = "Respond with N number of DNAME aliases containing random chain index (`dnalias####.yourdomain.com`). BEWARE: This could result in multiplication."
author = "ivan.jedek@oryxlabs.com"
category = "Aliases, loops and chains"

code = '''
           elif req.first_subdomain.startswith("dnalias"):
              # Send multiple random DNAME aliases
              # BEWARE: This could result in multiplication
              answers = int(req.subdomains[1]) if req.subdomains[1].isnumeric() else 1
              ### DNS header ########
              buffer = prep_dns_header(b'\x84\x00', req.QURR, answers, 0, 0)
              ### QUESTION SECTION ########
              if resp.noq: buffer += convDom2Bin(req.full_domain) + req.type_bin + req.class_bin
              ### ANSWER SECTION ########
              doms = []
              for i in range(answers):
                  # DNAME
                  dom = name_fuzz(resp.nfz) if hasattr(resp, "nfz") else random_chain(req.full_domain)
                  bindom = convDom2Bin(dom)
                  buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
                  buffer += getTypeBin("DNAME") + getClassBin("IN")
                  buffer += struct.pack(">L", resp.TTL)      ## TTL
                  buffer += struct.pack(">H", len(bindom))   ## Data length
                  buffer += bindom                           ## DNAME value
                  doms.append(dom)
              # log and send
              log("%d DNAME aliases: %s" % (answers, ', '.join(map(str, doms[:3])) + (', ...' if answers > 3 else '')))
              send_buf(self, buffer)
              #####################################################################
'''
