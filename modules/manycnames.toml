[module]
name = "manycnames"
info = "Many always CNAME aliases"
desc = "Respond with a arbitrary number of randomly generated CNAME records."
type = "feature"
author = "ivan.jedek@oryxlabs.com"

code = '''
if req.first_subdomain.startswith("manycnames"):
   # Send X number of CNAME records
   nans = 10  # number of answers (10 default)
   if req.subdomains[1].isnumeric():
      nans = int(req.subdomains[1])
   ### DNS header ########
   buffer = prep_dns_header(b'\x84\x00', req.QURR, nans, 0, 0)
   ### QUESTION SECTION ########
   if resp.noq: buffer += convDom2Bin(req.full_domain) + req.type_bin + req.class_bin
   ### ANSWER SECTION ########
   # generate alwaysXXXX domains
   for i in range(nans):
       dom = "always" + str(random.randint(1,100000)) + "." + req.sld_tld_domain
       buffer += convDom2Bin(req.full_domain) + getTypeBin("CNAME") + getClassBin("IN")
       buffer += struct.pack(">L", resp.TTL)                ## TTL
       buffer += struct.pack(">H", len(dom)+2)              ## Data length
       buffer += convDom2Bin(dom)                           ## CNAME value
   # log and send
   log("sending %d always* CNAMEs" % (nans))
   send_buf(self, buffer)
   #####################################################################
'''
