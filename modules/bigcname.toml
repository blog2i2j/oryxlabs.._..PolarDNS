[module]
name = "bigcname"
type = "feature"
info = "Long CNAME alias of arbitrary size"
desc = "Respond with a randomly generated CNAME of arbitrary size, capable of creating oversized domain labels and domain names."
author = "ivan.jedek@oryxlabs.com"
category = "CNAME fuzzing"

code = '''
if req.first_subdomain.startswith("bigcname"):
   # Send big CNAME record, for example:
   # bigcname.10.5.10.yourdomain.com will generate CNAME of:
   #            10       5       10
   # always.7ogeechcv7.hlri6.5ljh1607ca.yourdomain.com
   ### DNS header ########
   buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
   ### QUESTION SECTION ########
   if resp.noq: buffer += convDom2Bin(req.full_domain) + req.type_bin + req.class_bin
   ### ANSWER SECTION ########
   dom = "always"
   for lbl in req.subdomains:
       if lbl.isnumeric():
          dom += '.' + ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(int(lbl)))
   dom += '.' + req.sld_tld_domain
   # CNAME
   buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
   buffer += getTypeBin("CNAME") + getClassBin("IN")
   buffer += struct.pack(">L", resp.TTL)                ## TTL
   buffer += struct.pack(">H", len(dom)+2)              ## Data length
   buffer += convDom2Bin(dom)                           ## CNAME value
   # log and send
   log("CNAME %s (%d B)" % (dom, len(dom)))
   send_buf(self, buffer)
   #####################################################################
'''
