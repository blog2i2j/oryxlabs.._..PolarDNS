[module]
name = "manylabels"
type = "feature"
info = "Long CNAME with arbitrary number of labels"
desc = "Respond with a CNAME containing arbitrary number of labels (domain components), capable of creating oversized domain labels and domain names."
author = "ivan.jedek@oryxlabs.com"
category = "CNAME fuzzing"

code = '''
if req.first_subdomain.startswith("manylabels"):
   # Send big CNAME record made of many labels, for example:
   labels = 10  # number of domain labels
   if req.subdomains[1].isnumeric():
      labels = int(req.subdomains[1])
   labelsize = 1  # label size
   if req.subdomains[2].isnumeric():
      labelsize = int(req.subdomains[2])
   ### DNS header ########
   buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
   ### QUESTION SECTION ########
   if resp.noq: buffer += convDom2Bin(req.full_domain) + req.type_bin + req.class_bin
   ### ANSWER SECTION ########
   dom = "always."
   for i in range(labels):
       lbl = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(labelsize))
       dom += lbl + "."
   dom += req.sld_tld_domain
   # # # # # 
   buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
   buffer += getTypeBin("CNAME") + getClassBin("IN")
   buffer += struct.pack(">L", resp.TTL)           ## TTL
   buffer += struct.pack(">H", len(dom)+2)         ## Data length
   buffer += convDom2Bin(dom)
   # log and send
   log("A %s" % (dom))
   send_buf(self, buffer)
   #####################################################################
'''
