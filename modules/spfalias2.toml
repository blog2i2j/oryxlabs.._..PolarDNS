[module]
name = "spfalias2"
type = "feature"
info = "TXT SPF random N aliases"
desc = "Respond with N number of SPF(TXT) aliases containing random chain index (`spfalias####.yourdomain.com`). BEWARE: This could result in multiplication."
author = "ivan.jedek@oryxlabs.com"
category = "Aliases, loops and chains"

code = '''
           elif req.first_subdomain.startswith("spfalias2"):
              # Send a single SPF (TXT) record with multiple random aliases included one by one
              # BEWARE: This could result in multiplication
              aliases = int(req.subdomains[1]) if req.subdomains[1].isnumeric() else 1
              buffer = b''
              answers = []
              doms = []
              data = "v=spf1"
              for i in range(aliases):
                  dom = name_fuzz(resp.nfz) if hasattr(resp, "nfz") else "spfalias2" + str(random.getrandbits(20) % 100000) + "." + ".".join(req.subdomains[1:])
                  doms.append(dom)
                  tmpdata = data + " include:" + dom
                  if len(tmpdata) > 250:
                     # we need another answer record since
                     # the max size for TXT label is 255 bytes
                     data += " ~all"  # the additional 5 bytes
                     buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
                     buffer += getTypeBin("TXT") + getClassBin("IN")
                     buffer += struct.pack(">L", resp.TTL)      ## TTL
                     buffer += struct.pack(">H", len(data)+1)   ## Data length (2B)
                     buffer += struct.pack(">B", len(data))     ## TXT length (1B)
                     buffer += data.encode("utf-8")             ## TXT SPF value
                     answers.append(buffer)
                     data = "v=spf1 include:" + dom
                     buffer = b''
                     if i == aliases-1:
                        # this is also the last alias
                        data += " ~all"
                        buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
                        buffer += getTypeBin("TXT") + getClassBin("IN")
                        buffer += struct.pack(">L", resp.TTL)      ## TTL
                        buffer += struct.pack(">H", len(data)+1)   ## Data length (2B)
                        buffer += struct.pack(">B", len(data))     ## TXT length (1B)
                        buffer += data.encode("utf-8")             ## TXT SPF value
                        answers.append(buffer)
                     continue
                  data = tmpdata
                  if i == aliases-1:
                     # this is the last alias
                     data += " ~all"
                     buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
                     buffer += getTypeBin("TXT") + getClassBin("IN")
                     buffer += struct.pack(">L", resp.TTL)      ## TTL
                     buffer += struct.pack(">H", len(data)+1)   ## Data length (2B)
                     buffer += struct.pack(">B", len(data))     ## TXT length (1B)
                     buffer += data.encode("utf-8")             ## TXT SPF value
                     answers.append(buffer)
              ### DNS header ########
              buffer = prep_dns_header(b'\x84\x00', req.QURR, len(answers), 0, 0)
              ### QUESTION SECTION ########
              if resp.noq: buffer += convDom2Bin(req.full_domain) + req.type_bin + req.class_bin
              ### ANSWER SECTION ########
              for i in range(len(answers)):
                  buffer += answers[i]
              # log and send
              log("%d aliases in %d SPF(TXT) records: %s" % (aliases, len(answers), ', '.join(map(str, doms[:3])) + (', ...' if aliases > 3 else '')))
              send_buf(self, buffer)
              #####################################################################
'''
