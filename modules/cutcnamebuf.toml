[module]
name = "cutcnamebuf"
type = "feature"
info = "Cut CNAME record from the end"
desc = "Respond with legit CNAME record, but cut arbitrary number of bytes from the end of the buffer."
author = "ivan.jedek@oryxlabs.com"
category = "General features"

code = '''
if req.first_subdomain.startswith("cutcnamebuf"):
   # Send CNAME record, but cut X bytes from the buffer
   cutbytes = 0  # how many bytes to cut
   if req.subdomains[1].isnumeric():
      cutbytes = int(req.subdomains[1])
   ### DNS header ########
   buffer = prep_dns_header(b'\x84\x00', req.QURR, 1, 0, 0)
   ### QUESTION SECTION ########
   if resp.noq: buffer += convDom2Bin(req.full_domain) + req.type_bin + req.class_bin
   ### ANSWER SECTION ########
   # CNAME
   dom = "always" + str(random.getrandbits(20) % 900000 + 100000) + "." + req.sld_tld_domain
   buffer += b'\xc0\x0c' if resp.compress else convDom2Bin(req.full_domain)
   buffer += getTypeBin("CNAME") + getClassBin("IN")
   buffer += struct.pack(">L", resp.TTL)                ## TTL
   buffer += struct.pack(">H", len(dom)+2)              ## Data length
   buffer += convDom2Bin(dom)                           ## CNAME value
   buffer_len = len(buffer)
   if cutbytes > buffer_len:
      cutbytes = buffer_len
   newbuf  = buffer[0:buffer_len-cutbytes]
   log("CNAME %s (sending %d/%d B)" % (dom, len(newbuf), buffer_len))
   send_buf(self, newbuf, buffer_len)
   #####################################################################
'''
